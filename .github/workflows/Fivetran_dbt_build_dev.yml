name: Run Fivetran and dbt Build in Development

on:
  workflow_dispatch:
  schedule:
    - cron: '0,30 8-18 * * *'  # 9:00 AM UTC / 4:00 AM EST

jobs:
  sync_sage_intacct:
    runs-on: ubuntu-latest
    outputs:
      status: ${{steps.wait.outputs.status}}
    steps:
      - name: Trigger and wait for Sage Intacct
        id: wait
        run: |
          connector_id="barking_chewable"
          curl -X POST \
           -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
           https://api.fivetran.com/v1/connectors/$connector_id/force

          echo "Waiting for Sage Intacct sync to complete..."
          for i in {1..15}; do
            response=$(curl -s -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
              https://api.fivetran.com/v1/connectors/$connector_id)
            sleep 30
            sync_state=$(echo "$response" | jq -r '.data.status.sync_state')
            succeeded_at=$(echo "$response" | jq -r '.data.status.succeeded_at')

            echo "sync_state: $sync_state | succeeded_at: $succeeded_at"

            if [[ "$sync_state" != "syncing" ]] && [[ "$succeeded_at" = "null" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
            
          done
          
          echo "status=error" >> $GITHUB_OUTPUT
          exit 1


  sync_salesforce:
    runs-on: ubuntu-latest
    outputs:
      status: ${{steps.wait.outputs.status}}
    steps:
      - name: Trigger and wait for Sage Intacct
        id: wait
        run: |
          connector_id="trumpet_sobriety"
          curl -X POST \
           -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
           https://api.fivetran.com/v1/connectors/$connector_id/force

          echo "Waiting for Salesforce sync to complete..."
          for i in {1..15}; do
            response=$(curl -s -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
              https://api.fivetran.com/v1/connectors/$connector_id)
            sleep 30
            sync_state=$(echo "$response" | jq -r '.data.status.sync_state')
            succeeded_at=$(echo "$response" | jq -r '.data.status.succeeded_at')

            echo "sync_state: $sync_state | succeeded_at: $succeeded_at"

            if [[ "$sync_state" != "syncing" ]] && [[ "$succeeded_at" = "null" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
            
          done
          
          echo "status=error" >> $GITHUB_OUTPUT
          exit 1

  sync_ukg_pro:
    runs-on: ubuntu-latest
    outputs:
      status: ${{steps.wait.outputs.status}}
    steps:
      - name: Trigger and wait for ukg pro
        id: wait
        run: |
          connector_id="brim_prize"
          curl -X POST \
           -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
           https://api.fivetran.com/v1/connectors/$connector_id/force

          echo "Waiting for ukg pro sync to complete..."
          for i in {1..15}; do
            response=$(curl -s -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
              https://api.fivetran.com/v1/connectors/$connector_id)
            sleep 30
            sync_state=$(echo "$response" | jq -r '.data.status.sync_state')
            succeeded_at=$(echo "$response" | jq -r '.data.status.succeeded_at')

            echo "sync_state: $sync_state | succeeded_at: $succeeded_at"

            if [[ "$sync_state" != "syncing" ]] && [[ "$succeeded_at" = "null" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
            
          done
          
          echo "status=error" >> $GITHUB_OUTPUT
          exit 1

  sync_portal:
    runs-on: ubuntu-latest
    outputs:
      status: ${{steps.wait.outputs.status}}
    steps:
      - name: Trigger and wait for portal
        id: wait
        run: |
          connector_id="pose_allude"
          curl -X POST \
           -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
           https://api.fivetran.com/v1/connectors/$connector_id/force
          sleep 30
          echo "Waiting for portal sync to complete..."
          for i in {1..15}; do
            response=$(curl -s -u "${{ secrets.FIVETRAN_API_KEY }}:${{ secrets.FIVETRAN_API_SECRET }}" \
              https://api.fivetran.com/v1/connectors/$connector_id)
            
            sync_state=$(echo "$response" | jq -r '.data.status.sync_state')
            succeeded_at=$(echo "$response" | jq -r '.data.status.succeeded_at')

            echo "sync_state: $sync_state | succeeded_at: $succeeded_at"

            if [[ "$sync_state" != "syncing" ]] && [[ "$succeeded_at" = "null" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
            
          done
          
          echo "status=error" >> $GITHUB_OUTPUT
          exit 1
                    


  dbt-build:
    name: Run dbt after all Fivetran syncs
    needs:
      - sync_sage_intacct
      - sync_salesforce
      - sync_ukg_pro
      - sync_portal
    if: |
      github.ref == 'refs/heads/development' &&
      needs.sync_sage_intacct.outputs.status == 'success' && 
      needs.sync_salesforce.outputs.status == 'success' && 
      needs.sync_ukg_pro.outputs.status == 'success' && 
      needs.sync_portal.outputs.status == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core dbt-snowflake

      - name: Decode Snowflake private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SNOWFLAKE_PK_BASE64 }}" | base64 -d > ~/.ssh/snowflake_key.pem
          chmod 600 ~/.ssh/snowflake_key.pem

      - name: Run dbt build
        run: dbt build --profiles-dir ./profiles --target dev
        working-directory: cai_bi

      - name: Send email on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.office365.com
          server_port: 587
          username: ${{ secrets.NOTIFICATION_MAIL_USERNAME }}
          password: ${{ secrets.NOTIFICATION_MAIL_PASSWORD }}
          subject: "üö® dbt Build Failed in GitHub Actions (development)"
          to: itsupport@cagents.com,evan.gutzwiller@cagents.com 
          from: GitHub Actions <${{ secrets.NOTIFICATION_MAIL_USERNAME }}>
          body: |
            ‚ùå The dbt build failed in your GitHub Actions workflow.

            ‚Ä¢ Workflow: ${{ github.workflow }}
            ‚Ä¢ Job: ${{ github.job }}
            ‚Ä¢ Branch: ${{ github.ref }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
